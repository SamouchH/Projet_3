import streamlit as st


st.set_page_config(
    page_title="Assistant vendeur",
    page_icon="üë©‚Äçüíª",
)

st.subheader("Analyse du set de donn√©es d'entrainement")

st.markdown(
    """
    Dans le cadre de notre projet, **Jimmy**, **Haroune** et **Alexandre** ont explor√© plusieurs mod√®les de classification afin d'√©valuer la meilleure approche pour notre jeu de donn√©es.

    L'objectif de ce benchmark est de comparer :
    - La **pr√©cision** des mod√®les
    - Le **temps d'entra√Ænement**
    - La **capacit√© √† g√©n√©raliser** (via validation crois√©e)
    - Et leur **facilit√© d'int√©gration** dans notre application Streamlit

    üëá Retrouvez ci-dessous un aper√ßu de leurs travaux. Les d√©tails techniques et r√©sultats seront compl√©t√©s au fur et √† mesure de l'analyse.
    """
    )

st.markdown("""
    <style>
    div[data-baseweb="tab-list"] {
        justify-content: center;
        gap: 10rem;
    }
    </style>
""", unsafe_allow_html=True)

tab1, tab2, tab3 = st.tabs(['Alexandre', 'Haroune', 'Jimmy'])

with tab1:
    st.markdown(
    """
    Alexandre a travaill√© sur la technologie OCR Tesseract.
Il a test√© l'ensemble des m√©thodes de filtrage d'image afin d'√©valuer celles offrant les meilleurs r√©sultats avec Tesseract. Le filtre ayant donn√© les performances les plus satisfaisantes est le filtre de r√©duction de bruit (Denoised).

Lorsqu'un texte peut √™tre extrait de l'image, celui-ci est ensuite analys√© par un algorithme combinant un dictionnaire de r√©f√©rence, des expressions r√©guli√®res, ainsi que plusieurs m√©thodes de similarit√© textuelle : Levenshtein, Jaro-Winkler, Char N-gram et FuzzyWuzzy.

√Ä ce stade, la pr√©cision du syst√®me est tr√®s bonne, mais le rappel reste encore faible, ce qui signifie que nous ratons une partie des textes pertinents.

Les donn√©es extraites sont ensuite exploit√©es par plusieurs mod√®les de classification :

    R√©gression logistique ‚Äî F1: 0.4362 | Accuracy: 0.5070 | Recall: 0.5070

    SVM ‚Äî F1: 0.3498 | Accuracy: 0.4507 | Recall: 0.4507

    Random Forest ‚Äî F1: 0.4536 | Accuracy: 0.5211 | Recall: 0.5211

    Gradient Boosting ‚Äî F1: 0.4354 | Accuracy: 0.5070 | Recall: 0.5070

Par ailleurs, Alexandre a √©galement d√©velopp√© un mod√®le de reconnaissance de logos permettant d'identifier les diff√©rentes plateformes (PlayStation, Xbox, etc.), avec une accuracy de 0.54.
    """
    )

with tab2:
    st.markdown(
    """
    Haroune a travaill√© sur RapidOCR, une biblioth√®que OCR performante bas√©e sur les mod√®les PaddleOCR.
    
L'impl√©mentation se d√©roule en plusieurs √©tapes :
1. **D√©tection de texte** : RapidOCR identifie les √©l√©ments textuels pr√©sents sur les images de jeux
2. **Post-traitement** : Le texte d√©tect√© est trait√© par un syst√®me de classification bas√© sur des mots-cl√©s
3. **Matching de mots-cl√©s** : Attribution d'un score pour chaque cat√©gorie et sous-cat√©gorie en fonction des correspondances

Comme on peut le voir sur l'exemple ci-dessous, RapidOCR d√©tecte diff√©rents √©l√©ments textuels sur une bo√Æte de jeu avec leurs scores de confiance respectifs. Plus le score est proche de 1, plus l'OCR est confiant dans sa d√©tection :
    """
    )
    
    # Create columns for layout
    col1, col2 = st.columns([3, 2])
    
    with col1:
        # Directly embed example image using base64 for reliability
        from PIL import Image
        import io
        import base64
        import requests
        from io import BytesIO
        
        # Use a placeholder image - in the real application, replace this with the actual RapidOCR screenshot
        st.write("Visualisation de d√©tection OCR :")
        
        # Load a sample game boy advance image for demonstration
        try:
            # Display the base image with the OCR bounding boxes
            st.image("logos/rapidocr_example.png", caption="Exemple de zones d√©tect√©es par RapidOCR sur une bo√Æte de jeu", use_container_width=True)
            st.caption("Note: Les zones vertes repr√©sentent les r√©gions o√π du texte a √©t√© d√©tect√© avec la confiance associ√©e.")
        except Exception as e:
            st.error(f"Impossible de charger l'image d'exemple: {e}")
            # Create a simple placeholder image
            img = Image.new('RGB', (600, 300), color = (240, 240, 240))
            st.image(img, caption="Placeholder - Image d'exemple non disponible", use_container_width=True)
    
    with col2:
        # Example text detection results
        st.markdown("""
        **Texte d√©tect√© par RapidOCR:**
        ```
        "Asterix" (0.93)
        "FOR" (0.85)
        "JEUX!" (0.94)
        "GAMEBOYADVANCE" (0.98)
        "&OBEF" (0.86)
        "PAF!" (0.96)
        "PARTOLITATSY" (0.85)
        "Nintendo" (0.96)
        ```
        
        Le texte d√©tect√© est ensuite utilis√© pour la classification par cat√©gorie et sous-cat√©gorie.
        """)
    
    st.markdown(
    """
Le post-traitement utilise un dictionnaire de mots-cl√©s sp√©cifiques √† chaque plateforme :
- Nintendo : ["nintendo", "game boy", "gameboy", "advance", "gba", "switch", "wii", "nes", "3ds", "ds"]
- PlayStation : ["playstation", "ps1", "ps2", "ps3", "ps4", "ps5", "sony"]
- Xbox : ["xbox", "microsoft", "360", "one", "series"]
    
Dans l'exemple ci-dessus, les mots-cl√©s "nintendo" et "gameboy advance" permettent de classifier l'image dans la cat√©gorie **Nintendo** et la sous-cat√©gorie **Jeux Game Boy Advance**.

Le syst√®me attribue un score de confiance en calculant le ratio entre les mots-cl√©s correspondants et le nombre total de mots-cl√©s pour cette cat√©gorie.
    
Les r√©sultats obtenus avec cet outil donnent une pr√©cision de 47% pour la cat√©gorie et 48% pour la sous-cat√©gorie.
    """
    )
    
    # Add section for confusion matrix
    st.subheader("Matrice de confusion pour RapidOCR")
    
    try:
        # Try to load the confusion matrix image
        st.image("logos/confusion_matrix_rapidocr.png", caption="Matrice de confusion pour la classification par cat√©gorie avec RapidOCR", use_container_width=True)
    except Exception as e:
        st.error(f"Impossible de charger la matrice de confusion: {e}")
        
    st.markdown("""
    La matrice de confusion ci-dessus r√©v√®le plusieurs informations int√©ressantes :
    
    - **Points forts** : RapidOCR est relativement performant pour la d√©tection des jeux Nintendo (74%), PlayStation (77%) et rep√®re correctement tous les jeux SEGA (100%).
    
    - **Faiblesses** : L'algorithme a tendance √† classifier de nombreux jeux comme "Unknown" (inconnu), en particulier pour Xbox (100%) et SEGA (100%).
    
    - **Confusion sp√©cifique** : 16% des jeux Nintendo sont incorrectement classifi√©s comme PC Gaming, tandis que 26% sont consid√©r√©s comme inconnus. Pour PlayStation, 19% sont incorrectement classifi√©s comme inconnus.
    
    Cette matrice explique pourquoi l'accuracy globale reste √† 47% - l'OCR parvient √† bien d√©tecter certaines cat√©gories mais √©choue compl√®tement sur d'autres, souvent par manque d'indices textuels distinctifs.
    """)
    
    # Add subcategory confusion matrix
    st.subheader("Matrice de confusion pour les sous-cat√©gories")
    
    try:
        # Try to load the subcategory confusion matrix image
        st.image("logos/confusion_subcat.png", caption="Matrice de confusion pour la classification par sous-cat√©gorie avec RapidOCR", use_container_width=True)
    except Exception as e:
        st.error(f"Impossible de charger la matrice de confusion des sous-cat√©gories: {e}")
        
    st.markdown("""
    Pour les sous-cat√©gories, le mod√®le montre √©galement des performances int√©ressantes :
    
    - **Excellentes performances** sur certaines sous-cat√©gories sp√©cifiques comme Game Boy, Game Boy Advance, Nintendo Switch, Nintendo Wii, PS1, Super Nintendo et les consoles Xbox (scores de 100%).
    
    - **Bonnes performances** sur Nintendo DS (71%), Jeux PS2 (89%), Jeux PS4 (75%).
    
    - **Performances moyennes** pour Jeux PC (68%) et Jeux PS3 (67%), avec une tendance √† la confusion entre ces plateformes.
    
    - **Confusion notable** pour les jeux PS Vita qui sont classifi√©s comme PS1 dans 50% des cas.
    
    Ces r√©sultats plus d√©taill√©s montrent que l'OCR est particuli√®rement efficace pour identifier les mentions explicites de plateformes sp√©cifiques, mais peine √† diff√©rencier certaines g√©n√©rations de consoles lorsque les indices textuels sont similaires.
    """)
    
    st.markdown(
    """
Ces performances relativement faibles s'expliquent par plusieurs facteurs :
- Le d√©s√©quilibre de la base de donn√©es, visualisable via le treemap de la page "Analyse"
- L'absence de texte ou logo distinctif sur certaines images
- Les limitations de l'OCR face aux polices stylis√©es des jeux vid√©o
- La d√©pendance √† des listes de mots-cl√©s pr√©d√©finies qui ne peuvent couvrir toutes les variations

La corr√©lation entre les r√©sultats obtenus par RapidOCR et d'autres solutions comme Tesseract (utilis√©e par Alexandre) montre que l'OCR peut √™tre un outil pr√©cieux pour la d√©tection de certains types de jeux, mais n'est pas suffisante comme solution unique.

Haroune s'est ensuite orient√© vers l'exp√©rimentation de mod√®les VLLM (Vision Language Large Models) tels que : Claude, OpenAI, Gemini et Mistral, qui offrent une meilleure compr√©hension du contexte visuel gr√¢ce √† l'apprentissage multimodal.
    """
    )

with tab3:
    st.markdown(
    """
Jimmy a travaill√© dans un premier temps avec DoctR, mais les r√©sultats obtenus se sont r√©v√©l√©s peu concluants : l'information textuelle n'√©tait pas correctement extraite des images.

Il s'est ensuite orient√© vers un r√©seau de neurones simple, dont la matrice de confusion a montr√© de bons r√©sultats pour la classe PC Gaming, mais des performances plus faibles sur les autres cat√©gories.
    """)
    img_path = "logos/cnn.png"
    st.image(img_path, caption="Matrice de confusion CNN", use_container_width=True)

    st.markdown(
        """
Par la suite, il a test√© un mod√®le pr√©-entra√Æn√©, MobileNet V2, avec les r√©sultats suivants :
Accuracy : 0.4623
Pr√©cision : 0.3107
    """)
    img_path = "logos/mobilenetv2.png"
    st.image(img_path, caption="Matrice de confusion MobileNet v2", use_container_width=True)

    st.markdown(
    """
Il a ensuite affin√© ce mod√®le gr√¢ce √† du fine-tuning, ce qui a permis d'am√©liorer les performances :
Accuracy : 0.5000
Pr√©cision : 0.5858

    """)
    img_path = "logos/MNV2_ft.png"
    st.image(img_path, caption="Matrice de confusion MobileNet v2 fine tune", use_container_width=True)

    st.markdown(
        """
Jimmy a entra√Æn√© un **Grad-CAM** afin d'observer les zones activ√©es par le mod√®le lors de la pr√©diction.  
Nous pouvons constater que ces zones ne correspondent pas toujours aux √©l√©ments informatifs attendus, comme les logos ou le texte pr√©sents sur l'image.
    
    """)
    col1,col2 = st.columns(2)
    with col1:
        img_path = "logos/grad_cam1.png"
        st.image(img_path, caption="Grad cam sur une cartouche GameBoy", use_container_width=True)

    with col2:
        img_path = "logos/grad_cam2.png"
        st.image(img_path, caption="Grad cam sur le jeu Sims", use_container_width=True)
