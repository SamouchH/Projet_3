import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import matplotlib.pyplot as plt

st.set_page_config(
    page_title="Assistant vendeur",
    page_icon="üë©‚Äçüíª",
)

st.subheader("Analyse du set de donn√©es d'entrainement")

if 'data' in st.session_state:
    df = st.session_state.data

    # Liste des cat√©gories disponibles dans le DataFrame
    categories_disponibles = df['category'].unique().tolist()
    
    # Ajout de l'option "Toutes" pour voir toutes les cat√©gories
    list_marque = ['Toutes'] + categories_disponibles  

    # S√©lection de la cat√©gorie avec un menu d√©roulant
    selected_category = st.selectbox("S√©lectionnez une cat√©gorie :", list_marque)

    # Fonction pour g√©n√©rer le dataframe pour le treemap
    def generate_plot(df):
        return df.groupby(['category', 'subcategory']).size().reset_index(name='count')

    # Filtrer les donn√©es si une cat√©gorie sp√©cifique est s√©lectionn√©e
    if selected_category == "Toutes":
        df_marque = df  # Afficher toutes les cat√©gories
    else:
        df_marque = df[df['category'] == selected_category]  # Filtrer la s√©lection

    # G√©n√©ration des donn√©es pour le treemap
    df_treemap = generate_plot(df_marque)

    # Cr√©ation du treemap avec Plotly
    fig = px.treemap(df_treemap, 
                    path=['category', 'subcategory'],  # Hi√©rarchie Cat√©gorie -> Sous-cat√©gorie
                    values='count',
                    color='category'
                    )

    # Afficher le graphique dans Streamlit
    st.plotly_chart(fig)


