version: '3.8'

services:
  # API principale
  api:
    build: .
    container_name: projet3_api
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///./data/projet3_api.db
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this}
      - NVIDIA_API_KEY=${NVIDIA_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./predictions:/app/predictions
      - ../Streamlit/modele_cnn_transfer.h5:/app/modele_cnn_transfer.h5:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - projet3_network

  # Base de donn√©es PostgreSQL (optionnelle)
  postgres:
    image: postgres:15-alpine
    container_name: projet3_postgres
    environment:
      - POSTGRES_DB=projet3_api
      - POSTGRES_USER=projet3_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - projet3_network

  # Redis pour le cache et rate limiting
  redis:
    image: redis:7-alpine
    container_name: projet3_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - projet3_network

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: projet3_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - projet3_network

  # Interface de monitoring avec Grafana (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: projet3_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - projet3_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  projet3_network:
    driver: bridge 